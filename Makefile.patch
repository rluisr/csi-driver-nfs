diff --git a/Makefile b/Makefile
index 05d6062b..b2d38d98 100644
--- a/Makefile
+++ b/Makefile
@@ -37,8 +37,8 @@ override IMAGE_VERSION := e2e-$(GIT_COMMIT)
 endif
 endif
 IMAGENAME ?= nfsplugin
-REGISTRY ?= andyzhangx
-REGISTRY_NAME ?= $(shell echo $(REGISTRY) | sed "s/.azurecr.io//g")
+REGISTRY = rluisr
+REGISTRY_NAME = rluisr
 IMAGE_TAG = $(REGISTRY)/$(IMAGENAME):$(IMAGE_VERSION)
 IMAGE_TAG_LATEST = $(REGISTRY)/$(IMAGENAME):latest
 
@@ -48,54 +48,23 @@ E2E_HELM_OPTIONS += ${EXTRA_HELM_OPTIONS}
 # Output type of docker buildx build
 OUTPUT_TYPE ?= docker
 
-ALL_ARCH.linux = arm64 amd64 ppc64le
-ALL_OS_ARCH = linux-arm64 linux-arm-v7 linux-amd64 linux-ppc64le
+ALL_ARCH.linux = arm64 amd64
+ALL_OS_ARCH = linux-arm64 linux-amd64
 
 .EXPORT_ALL_VARIABLES:
 
 all: nfs
 
-.PHONY: verify
-verify: unit-test
-	hack/verify-all.sh
-
-.PHONY: unit-test
-unit-test:
-	go test -covermode=count -coverprofile=profile.cov ./pkg/... -v
-
-.PHONY: sanity-test
-sanity-test: nfs
-	./test/sanity/run-test.sh
-
-.PHONY: local-build-push
-local-build-push: nfs
-	docker build -t $(LOCAL_USER)/nfsplugin:latest .
-	docker push $(LOCAL_USER)/nfsplugin
-
 .PHONY: nfs
 nfs:
 	CGO_ENABLED=0 GOOS=linux GOARCH=$(ARCH) go build -a -ldflags "${LDFLAGS} ${EXT_LDFLAGS}" -mod vendor -o bin/${ARCH}/nfsplugin ./cmd/nfsplugin
 
-.PHONY: nfs-armv7
-nfs-armv7:
-	CGO_ENABLED=0 GOOS=linux GOARCH=arm GOARM=7 go build -a -ldflags "${LDFLAGS} ${EXT_LDFLAGS}" -mod vendor -o bin/arm/v7/nfsplugin ./cmd/nfsplugin
-
 .PHONY: container-build
 container-build:
 	docker buildx build --pull --output=type=$(OUTPUT_TYPE) --platform="linux/$(ARCH)" \
 		--provenance=false --sbom=false \
 		-t $(IMAGE_TAG)-linux-$(ARCH) --build-arg ARCH=$(ARCH) .
 
-.PHONY: container-linux-armv7
-container-linux-armv7:
-	docker buildx build --pull --output=type=$(OUTPUT_TYPE) --platform="linux/arm/v7" \
-		--provenance=false --sbom=false \
-		-t $(IMAGE_TAG)-linux-arm-v7 --build-arg ARCH=arm/v7 .
-
 .PHONY: container
 container:
 	docker buildx rm container-builder || true
@@ -108,8 +77,6 @@ container:
 		ARCH=$${arch} $(MAKE) nfs; \
 		ARCH=$${arch} $(MAKE) container-build; \
 	done
-	$(MAKE) nfs-armv7
-	$(MAKE) container-linux-armv7
 
 .PHONY: push
 push:
@@ -118,7 +85,9 @@ ifdef CI
 	docker manifest push --purge $(IMAGE_TAG)
 	docker manifest inspect $(IMAGE_TAG)
 else
-	docker push $(IMAGE_TAG)
+	for arch in $(ALL_ARCH.linux); do \
+		docker push $(IMAGE_TAG)-linux-$${arch}; \
+	done
 endif
 
 .PHONY: push-latest
@@ -130,34 +99,4 @@ ifdef CI
 else
 	docker tag $(IMAGE_TAG) $(IMAGE_TAG_LATEST)
 	docker push $(IMAGE_TAG_LATEST)
-endif
-
-.PHONY: install-nfs-server
-install-nfs-server:
-	kubectl apply -f ./deploy/example/nfs-provisioner/nfs-server.yaml
-	kubectl delete secret mount-options --ignore-not-found
-	kubectl create secret generic mount-options --from-literal mountOptions="nfsvers=4.1"
-
-.PHONY: install-helm
-install-helm:
-	curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
-
-.PHONY: e2e-bootstrap
-e2e-bootstrap: install-helm
-	OUTPUT_TYPE=registry $(MAKE) container push
-	helm install csi-driver-nfs ./charts/latest/csi-driver-nfs --namespace kube-system --wait --timeout=15m -v=5 --debug \
-		${E2E_HELM_OPTIONS} \
-		--set controller.logLevel=8 \
-		--set node.logLevel=8
-
-.PHONY: e2e-teardown
-e2e-teardown:
-	helm delete csi-driver-nfs --namespace kube-system
-
-.PHONY: e2e-test
-e2e-test:
-	if [ ! -z "$(EXTERNAL_E2E_TEST)" ]; then \
-		bash ./test/external-e2e/run.sh;\
-	else \
-		go test -v -timeout=0 ./test/e2e ${GINKGO_FLAGS};\
-	fi
+endif
\ No newline at end of file
